//
//  EmojiToolModel.swift
//  XDExerciseExample
//
//  Created by xiudou on 2018/5/6.
//  Copyright ¬© 2018Âπ¥ CoderST. All rights reserved.
//

import UIKit
import YYImage
import YYText
fileprivate let checkStr = "\\[[a-zA-Z0-9\\u4e00-\\u9fa5]+\\]"
class EmojiToolModel: NSObject {
    // MARK:- ÂÜÖÈÉ®ÂèòÈáè
    fileprivate static let emojiPath = Bundle.main.path(forResource: "XD_Emoji", ofType: "plist")
    fileprivate static var scale : CGFloat = UIScreen.main.scale
    fileprivate static var emotionSize : CGSize = .zero
    fileprivate static var lineSpacing : CGFloat = 4.0
    fileprivate static var font : UIFont = UIFont.systemFont(ofSize: 12)
    fileprivate static var textColor : UIColor = .black
    fileprivate static var matches : [NSTextCheckingResult] = [NSTextCheckingResult]()
    fileprivate static var plainStr : String = ""
    fileprivate static var emojiImages : NSDictionary = NSDictionary()
    fileprivate static var imageDataArray : [[String : Any]] = [[String : Any]]()
    fileprivate static var attStr : NSMutableAttributedString = NSMutableAttributedString(string: "")
    fileprivate static var resultStr : NSMutableAttributedString = NSMutableAttributedString(string: "")
    
    // MARK:- ÂØπÂ§ñÊé•Âè£
    /*
     * ËΩ¨Á†ÅÊñπÊ≥ïÔºåÊääÊôÆÈÄöÂ≠óÁ¨¶‰∏≤ËΩ¨‰∏∫ÂØåÊñáÊú¨Â≠óÁ¨¶‰∏≤ÔºàÂåÖÂê´ÂõæÁâáÊñáÂ≠óÁ≠âÔºâ
     * ‰æã : [ÂìàÂìà]‰ªäÂ§©[ÂòªÂòª] -> üòÜ‰ªäÂ§©‚ò∫Ô∏è
     * ÂèÇÊï∞ font ÊòØÁî®Êù•Â±ïÁ§∫ÁöÑÂ≠ó‰ΩìÂ§ßÂ∞è
     * ÂèÇÊï∞ plainStr ÊòØÊôÆÈÄöÁöÑÂ≠óÁ¨¶‰∏≤
     * ÂèÇÊï∞ scale ÈªòËÆ§‰∏çÈúÄË¶Å‰º†ÈÄí(UIÂàáÂõæÂØπÂ∫îÊñáÊú¨Ë°åÈ´òÂáÜÁ°Æ)  ‰∏çÂáÜÁ°ÆÈúÄË¶ÅÊâãÂä®ÊîπÂÄº
     * ËøîÂõûÂÄºÔºöÁî®Êù•Â±ïÁ§∫ÁöÑÂØåÊñáÊú¨ÔºåÁõ¥Êé•Â§çÂà∂ÁªôlabelÂ±ïÁ§∫
     */
    class func emojiDecode(_ plainStr : String, _ font : UIFont, _ scale : CGFloat = UIScreen.main.scale)->NSMutableAttributedString{
        let resultStr = decodeWithPlainStr(plainStr, font, scale)
        return resultStr
    }

    /** Ëé∑ÂèñÂ±ûÊÄßÊñáÊú¨ÁöÑÂ∞∫ÂØ∏ */
    class func emojiAttributedStringGetSize(_ attributedString : NSMutableAttributedString, _ maxWidth : CGFloat)->CGSize{
        let size = emojiCalculateAttributedStringGetHeight(attributedString,maxWidth)
        return size
    }
    
    /*
     * Â∏¶Áî®Êà∑ÂõûÂ§çÁöÑÂ±ûÊÄßÂ≠óÁ¨¶‰∏≤ÂåÖÂê´ÂõæÁâáÊñáÂ≠óÁ≠âÔºâ
     * ‰æã : Â∞èÊòé ÂõûÂ§ç Â∞èÁéã: üòÜ‰ªäÂ§©‚ò∫Ô∏è
     * ÂèÇÊï∞ fromUserName
     * ÂèÇÊï∞ toUserName
     * ÂèÇÊï∞ content ËØÑËÆ∫ÁöÑÂÜÖÂÆπ
     * ÂèÇÊï∞ scale ÂõæÁâáÁ≥ªÊï∞  ÈªòËÆ§UIScreen.main.scale 1->max Ë∂äÂ§ßÂõæÁâáË∂äÂ∞è
     * ËøîÂõûÂÄºÔºöÁî®Êù•Â±ïÁ§∫ÁöÑÂØåÊñáÊú¨
     */
    class func emojiFromUserNameToUserName(_ fromUserName : String, _ toUserName : String = "", _ content : String, _ scale : CGFloat = UIScreen.main.scale)->NSAttributedString{
        let attributedString = fromUserNameToUserName(fromUserName, toUserName, content, scale)
        return attributedString
    }

    /** ÁÇπÂáªË°®ÊÉÖÊó∂ÔºåÊèíÂÖ•ÂõæÁâáÂà∞ËæìÂÖ•Ê°Ü */
    class func insertEmojiToTextView(_ emojiBtn : EmojiButton, _ textView : UITextView){
        insertEmoji(emojiBtn, textView)
    }
    
    /** ÁÇπÂáªÂèëÈÄÅÂêé‰ªétextViewÂØåÊñáÊú¨ -> NSString */
    class func getTextViewAttributedText(_ textView : UITextView)->NSString{
        let text = textView.attributedText.getPlainString()
        return text
    }
}

// MARK:- ÁßÅÊúâÂáΩÊï∞
extension EmojiToolModel {
    
    class fileprivate func fromUserNameToUserName(_ fromUserName : String, _ toUserName : String = "", _ content : String, _ scale : CGFloat = UIScreen.main.scale)->NSAttributedString{
        if toUserName.count > 0{
            // ÊúâÂõûÂ§ç
            let text = "\(fromUserName)ÂõûÂ§ç\(toUserName): \(content)"
            let textString = text as NSString
            //                var textString = text as NSString
            //            let mutableAttributedString = NSMutableAttributedString(string: textString as String)
            let mutableAttributedString = EmojiToolModel.emojiDecode(text, recommentCommentFont,scale)
            mutableAttributedString.yy_font = recommentCommentFont
            mutableAttributedString.yy_color = recommentCommentColor
            mutableAttributedString.yy_lineSpacing = 10
            let fromUserRange = NSMakeRange(0, fromUserName.count)
            let bacColor = UIColor(white: 0, alpha: 0.220)
            let fromUserHighlight = YYTextHighlight(backgroundColor: bacColor)
            //            fromUserHighlight.userInfo = [XDCommentUserKey : fromUser]
            
            mutableAttributedString.yy_setTextHighlight(fromUserHighlight, range: fromUserRange)
            // ËÆæÁΩÆÊòµÁß∞È¢úËâ≤
            mutableAttributedString.yy_setColor(XDGlobalOrangeTextColor, range: fromUserRange)
            
            let toUserRange = textString.range(of: "\(toUserName)")
            // ÊñáÊú¨È´ò‰∫ÆÊ®°Âûã
            let toUserHighlight = YYTextHighlight(backgroundColor: bacColor)
            //            toUserHighlight.userInfo = [XDCommentUserKey : toUser]
            mutableAttributedString.yy_setTextHighlight(toUserHighlight, range: toUserRange)
            // ËÆæÁΩÆÊòµÁß∞È¢úËâ≤
            mutableAttributedString.yy_setColor(XDGlobalOrangeTextColor, range: toUserRange)
            return mutableAttributedString
        }else{
            // Ê≤°ÊúâÂõûÂ§ç
            // 1 ÊãºÊé•Â≠óÁ¨¶
            let text = "\(fromUserName): \(content)"
            
            //            let textString = text as NSString
            // 2 ÂàõÂª∫Â±ûÊÄßÂ≠óÁ¨¶‰∏≤
            //                let mutableAttributedString = NSMutableAttributedString(string: textString as String)
            let mutableAttributedString = EmojiToolModel.emojiDecode(text, recommentCommentFont,scale)
            mutableAttributedString.yy_font = recommentCommentFont
            mutableAttributedString.yy_color = recommentCommentColor
            mutableAttributedString.yy_lineSpacing = 10
            //3 Ëé∑ÂèñfromuserÁöÑÂ∞∫ÂØ∏
            let fromUserRange = NSMakeRange(0, fromUserName.count)
            let bacColor = UIColor(white: 0, alpha: 0.220)
            let fromUserHighlight = YYTextHighlight(backgroundColor: bacColor)
            /// Â≠òÂÇ®userÂØπË±° ÂèØ‰ª•ÁÇπÂáªË∑≥ËΩ¨
            //            fromUserHighlight.userInfo = [XDCommentUserKey : fromUser]
            mutableAttributedString.yy_setTextHighlight(fromUserHighlight, range: fromUserRange)
            // ËÆæÁΩÆÊòµÁß∞È¢úËâ≤
            mutableAttributedString.yy_setColor(XDGlobalOrangeTextColor, range: fromUserRange)
            return mutableAttributedString
        }
        
    }
    
    /*
     * ËΩ¨Á†ÅÊñπÊ≥ïÔºåÊääÊôÆÈÄöÂ≠óÁ¨¶‰∏≤ËΩ¨‰∏∫ÂØåÊñáÊú¨Â≠óÁ¨¶‰∏≤ÔºàÂåÖÂê´ÂõæÁâáÊñáÂ≠óÁ≠âÔºâ
     * ÂèÇÊï∞ font ÊòØÁî®Êù•Â±ïÁ§∫ÁöÑÂ≠ó‰ΩìÂ§ßÂ∞è
     * ÂèÇÊï∞ plainStr ÊòØÊôÆÈÄöÁöÑÂ≠óÁ¨¶‰∏≤
     * ËøîÂõûÂÄºÔºöÁî®Êù•Â±ïÁ§∫ÁöÑÂØåÊñáÊú¨ÔºåÁõ¥Êé•Â§çÂà∂ÁªôlabelÂ±ïÁ§∫
     */
    class fileprivate func decodeWithPlainStr(_ plainStr : String, _ font : UIFont, _ scale : CGFloat = UIScreen.main.scale)->NSMutableAttributedString {
        self.font = font
        self.plainStr = plainStr
        self.textColor = .black
        self.scale = scale
        
        initProperty()
        executeMatch()
        setImageDataArray()
        setResultStrUseReplace()
        return resultStr
    }
    
    class fileprivate func emojiCalculateAttributedStringGetHeight(_ attributedString : NSMutableAttributedString, _ maxWidth : CGFloat)->CGSize{
        let textLimitSize = CGSize(width: maxWidth, height: CGFloat(MAXFLOAT))
        guard let textSize = YYTextLayout(containerSize: textLimitSize, text: attributedString)?.textBoundingSize else {
            return CGSize(width: 0, height: 0)
            
        }
        
        return textSize
    }
}

extension EmojiToolModel {
    class fileprivate func initProperty(){
        guard let emojiPath = emojiPath else {
            print("emojiPathÊ≤°Êúâ")
            return
        }
        guard let dictpath = NSDictionary(contentsOfFile: emojiPath) else {
            print("Ëß£ÊûêÂ§±Ë¥•")
            return
        }
        emojiImages = dictpath
        
        // ÊñáÊú¨Èó¥Èöî
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.lineSpacing = lineSpacing
        var dict : [NSAttributedStringKey : Any] = [NSAttributedStringKey : Any]()
        dict = [NSAttributedStringKey.font : font,
                   NSAttributedStringKey.paragraphStyle : paragraphStyle
            ]
        
        emotionSize = "/".sizeWithFont(font, dict)
        
        attStr = NSMutableAttributedString(string: plainStr, attributes: dict)
        
    }
}
// MARK: ÊØîÂØπÁªìÊûú
extension EmojiToolModel {
    class fileprivate func executeMatch(){
        let regexString = checkStr
        let regex = try! NSRegularExpression(pattern: regexString, options: .caseInsensitive)
        let totalRange = NSMakeRange(0, plainStr.count)
        matches = regex.matches(in: plainStr, options: NSRegularExpression.MatchingOptions(rawValue: 0), range: totalRange)
    }
}

extension EmojiToolModel {
    
    class fileprivate func setImageDataArray(){
        var imageDataArray : [[String : Any]] = [[String : Any]]()
    
        let matchesCount = matches.count - 1
        // ÂèçÂêëÈÅçÂéÜ
        for i in (0...matchesCount).reversed() {

            var record = [String : Any]()
            let attachMent = EmojiAttachment()
            attachMent.bounds = CGRect(x: 0, y: -4, width: emotionSize.height, height: emotionSize.height)
            let match = matches[i]
            
            let matchRange = match.range
            let str = plainStr as NSString
            let tagString = str.substring(with: matchRange)
            
            guard let imageName = emojiImages[tagString] as? String else{
                print("Ê≤°ÊúâÂèñÂà∞ÂõæÁâá")
                continue
            }
            if imageName.count == 0 {
                continue
            }
            
            let value = NSValue.init(range: matchRange)
            record["range"] = value
            record["imageName"] = imageName
            imageDataArray.append(record)
            
        }
        self.imageDataArray = imageDataArray
    
    }
}

extension EmojiToolModel {
    
    class fileprivate func setResultStrUseReplace(){
        let result = attStr
        for i in 0..<imageDataArray.count{
            guard let rangeValue = imageDataArray[i]["range"] as? NSValue else{
                
                continue
            }
            let range = rangeValue.rangeValue
            
            guard let imageName = imageDataArray[i]["imageName"] as? String else{
                continue
            }
            //            guard let imagePath = Bundle.main.path(forResource: imageName, ofType: "gif") else {
            //                print("Ê≤°ÊúâÊâæÂà∞gif")
            //                continue
            //            }
            
            var imagePath : String = ""
            if let gifpath = Bundle.main.path(forResource: imageName, ofType: "gif"){
                imagePath = gifpath
            }else if let pngpath = Bundle.main.path(forResource: imageName, ofType: "png"){
                
                imagePath = pngpath
            }else if let path = Bundle.main.path(forResource: imageName, ofType: nil){
                imagePath = path
                
            }else{
                print("Ê≤°ÊúâÊâæÂà∞ÂõæÁâá")
                continue
            }
            
            guard let data = NSData(contentsOfFile: imagePath) else { continue }
            // Ê≠§Â§ÑscÂõæÁâáÁöÑÂ§ßÂ∞èÊúÄÂ•ΩËÆ©UIÂàáÂ•Ω,ÂØπÂ∫îÁöÑÊòæÁ§∫Â§ßÂ∞è,‰∏çÁÑ∂ÈúÄË¶ÅÊâãÂä®Ë∞ÉÊï¥Ëøô‰∏™ÊØî‰æãÊù•ÈÄÇÂêàÁöÑÂ§ßÂ∞è
            let image = YYImage(data: data as Data, scale: scale)
            image?.preloadAllAnimatedImageFrames = true
            let imageView = YYAnimatedImageView(image: image)
            
            let attachText = NSMutableAttributedString.yy_attachmentString(withContent: imageView, contentMode: .center, attachmentSize: imageView.frame.size, alignTo: font, alignment: .center)
            result.replaceCharacters(in: range, with: attachText)
        }
        resultStr = result
    }
}

// MARK: ÁÇπÂáªË°®ÊÉÖÊó∂ÔºåÊèíÂÖ•ÂõæÁâáÂà∞ËæìÂÖ•Ê°Ü
extension EmojiToolModel {
    class fileprivate func insertEmoji(_ emojiBtn : EmojiButton, _ textView : UITextView){
        guard let emojiPath = EmojiToolModel.emojiPath else {
            print("emojiPathÊ≤°Êúâ")
            return
        }
        guard let dictpath = NSDictionary(contentsOfFile: emojiPath) else {
            print("Ëß£ÊûêÂ§±Ë¥•")
            return
        }
        let emojiAttachment = EmojiAttachment()
        // Êõ¥ÂÖ∑ÂõæÁâáÂêçÁß∞ÊâæÂà∞‰∏≠ÊñáÂêçÁß∞
        let chsName = getKeyForValue(emojiBtn.pngName ?? "", dictpath)
    
        emojiAttachment.chsName = chsName
        
        if let imageName = emojiBtn.pngName{
            emojiAttachment.image = UIImage(named: imageName)
        }else{
            print("EmojiButton‰∏äÊ≤°ÊúâÂõæÁâáÂêçÁß∞")
        }
        // ÊñáÊú¨Èó¥Èöî
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.lineSpacing = lineSpacing
        var dict : [NSAttributedStringKey : Any] = [NSAttributedStringKey : Any]()
        dict = [NSAttributedStringKey.font : font,
                NSAttributedStringKey.paragraphStyle : paragraphStyle
        ]
        let emotionSize = "/".sizeWithFont(font, dict)
        emojiAttachment.bounds = CGRect(x: 0, y: -4, width: emotionSize.height, height: emotionSize.height)
        let attributedString = NSAttributedString(attachment: emojiAttachment)
        textView.textStorage.insert(attributedString, at: textView.selectedRange.location)
        textView.selectedRange = NSMakeRange(textView.selectedRange.location + 1, textView.selectedRange.length)
        //ÈáçËÆæËæìÂÖ•Ê°ÜÂ≠ó‰Ωì
        resetTextStyle(textView)
    }
    
    /// Ëé∑ÂèñÂØπÂ∫îÁöÑÂõæÁâá‰∏≠ÊñáÂêçÁß∞ ‰∏éÊúçÂä°Âô®‰º†ÈÄíÁî®
    class fileprivate func getKeyForValue(_ pngName : String, _ dict : NSDictionary)->String{
        var chsName : String = ""
        for (key , obj) in dict{
            guard let objString = obj as? String else { continue }
            guard let keyString = key as? String else { continue }
            if objString == pngName{
                chsName = keyString
            }
        }
        return chsName
    }
    
    class fileprivate func resetTextStyle(_ textView : UITextView){
        let wholeRange = NSMakeRange(0, textView.textStorage.length)
        textView.textStorage.removeAttribute(NSAttributedStringKey.font, range: wholeRange)
        textView.textStorage.addAttribute(NSAttributedStringKey.font, value: font, range: wholeRange)
        let rect = CGRect(x: 0, y: 0, width: textView.contentSize.width, height: textView.contentSize.height)
        textView.scrollRectToVisible(rect, animated: false)
        
    }
}
